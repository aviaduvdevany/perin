diff --git a/src/lib/utils/token-encryption.ts b/src/lib/utils/token-encryption.ts
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/src/lib/utils/token-encryption.ts
@@ -0,0 +1,50 @@
+import { createCipherGCM, createDecipherGCM, randomBytes } from 'crypto';
+
+const ENCRYPTION_KEY = process.env.OAUTH_TOKEN_ENCRYPTION_KEY;
+const ALGORITHM = 'aes-256-gcm';
+
+if (!ENCRYPTION_KEY) {
+  throw new Error('OAUTH_TOKEN_ENCRYPTION_KEY environment variable is required');
+}
+
+export const encryptToken = (token: string): string => {
+  const iv = randomBytes(16);
+  const cipher = createCipherGCM(ALGORITHM, Buffer.from(ENCRYPTION_KEY, 'hex'));
+  cipher.setAAD(Buffer.from('perin-oauth-token'));
+  
+  let encrypted = cipher.update(token, 'utf8', 'hex');
+  encrypted += cipher.final('hex');
+  
+  const authTag = cipher.getAuthTag();
+  
+  // Combine IV + authTag + encrypted data
+  return iv.toString('hex') + ':' + authTag.toString('hex') + ':' + encrypted;
+};
+
+export const decryptToken = (encryptedToken: string): string => {
+  const [ivHex, authTagHex, encrypted] = encryptedToken.split(':');
+  
+  const iv = Buffer.from(ivHex, 'hex');
+  const authTag = Buffer.from(authTagHex, 'hex');
+  
+  const decipher = createDecipherGCM(ALGORITHM, Buffer.from(ENCRYPTION_KEY, 'hex'));
+  decipher.setAAD(Buffer.from('perin-oauth-token'));
+  decipher.setAuthTag(authTag);
+  
+  let decrypted = decipher.update(encrypted, 'hex', 'utf8');
+  decrypted += decipher.final('utf8');
+  
+  return decrypted;
+};
+
diff --git a/src/lib/integrations/token-revocation.ts b/src/lib/integrations/token-revocation.ts
new file mode 100644
index 0000000..2345678
--- /dev/null
+++ b/src/lib/integrations/token-revocation.ts
@@ -0,0 +1,30 @@
+import type { UserIntegration } from '@/lib/queries/integrations';
+
+export const revokeGoogleToken = async (accessToken: string): Promise<boolean> => {
+  try {
+    const response = await fetch('https://oauth2.googleapis.com/revoke', {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/x-www-form-urlencoded',
+      },
+      body: `token=${accessToken}`,
+    });
+    
+    return response.ok;
+  } catch (error) {
+    console.error('Error revoking Google token:', error);
+    return false;
+  }
+};
+
+export const revokeAllGoogleTokens = async (integrations: UserIntegration[]): Promise<void> => {
+  const googleIntegrations = integrations.filter(
+    integration => integration.integration_type === 'gmail' || integration.integration_type === 'calendar'
+  );
+  
+  await Promise.all(
+    googleIntegrations.map(integration => 
+      revokeGoogleToken(integration.access_token)
+    )
+  );
+};
+
diff --git a/src/lib/queries/integrations.ts b/src/lib/queries/integrations.ts
index 1234567..2345678 100644
--- a/src/lib/queries/integrations.ts
+++ b/src/lib/queries/integrations.ts
@@ -1,5 +1,6 @@
 import { query } from "@/lib/db";
 import { USER_INTEGRATIONS_TABLE } from "@/lib/tables";
+import { encryptToken, decryptToken } from '@/lib/utils/token-encryption';
 
 export interface UserIntegration {
   id: string;
@@ -20,6 +21,7 @@ export interface UserIntegration {
 // Get user integration by type
 export const getUserIntegration = async (
   userId: string,
   integrationType: string
 ): Promise<UserIntegration | null> => {
   const sql = `
     SELECT * FROM ${USER_INTEGRATIONS_TABLE}
@@ -30,7 +32,12 @@ export const getUserIntegration = async (
 
   try {
     const result = await query(sql, [userId, integrationType]);
-    return result.rows[0] || null;
+    if (!result.rows[0]) return null;
+    
+    const integration = result.rows[0];
+    return {
+      ...integration,
+      access_token: decryptToken(integration.access_token),
+      refresh_token: integration.refresh_token ? decryptToken(integration.refresh_token) : null,
+    };
   } catch (error) {
     console.error("Error getting user integration:", error);
     throw error;
@@ -45,6 +52,9 @@ export const createUserIntegration = async (
   accountEmail?: string | null,
   accountLabel?: string | null
 ): Promise<UserIntegration> => {
+  // Encrypt tokens before storage
+  const encryptedAccessToken = encryptToken(accessToken);
+  const encryptedRefreshToken = refreshToken ? encryptToken(refreshToken) : null;
+  
   const sql = `
     INSERT INTO ${USER_INTEGRATIONS_TABLE} (
       user_id, integration_type, access_token, refresh_token,
@@ -70,7 +80,7 @@ export const createUserIntegration = async (
       const result = await query(updateSql, [
-        accessToken,
-        refreshToken,
+        encryptedAccessToken,
+        encryptedRefreshToken,
         expiresAt.toISOString(),
         scopes,
         JSON.stringify(metadata),
@@ -85,7 +95,12 @@ export const createUserIntegration = async (
       console.log("Updated existing integration:", {
         integrationId: result.rows[0].id,
         connectedAt: result.rows[0].connected_at,
         accountEmail: result.rows[0].account_email,
       });
 
-      return result.rows[0];
+      return {
+        ...result.rows[0],
+        access_token: accessToken,      // Return decrypted for immediate use
+        refresh_token: refreshToken,    // Return decrypted for immediate use
+      };
     } else {
       // No existing integration, create a new one
       console.log("Creating new integration (no existing found)");
@@ -93,7 +108,7 @@ export const createUserIntegration = async (
       const result = await query(sql, [
         userId,
         integrationType,
-        accessToken,
-        refreshToken,
+        encryptedAccessToken,
+        encryptedRefreshToken,
         expiresAt.toISOString(),
         scopes,
         JSON.stringify(metadata),
@@ -108,7 +123,12 @@ export const createUserIntegration = async (
         accountEmail: result.rows[0].account_email,
       });
 
-      return result.rows[0];
+      return {
+        ...result.rows[0],
+        access_token: accessToken,      // Return decrypted for immediate use
+        refresh_token: refreshToken,    // Return decrypted for immediate use
+      };
     }
   } catch (error) {
     console.error("Error creating/updating user integration:", error);
@@ -120,6 +140,7 @@ export const createUserIntegration = async (
 // Update integration tokens
 export const updateIntegrationTokens = async (
   integrationId: string,
   accessToken: string,
   expiresAt: Date | null
 ): Promise<boolean> => {
+  const encryptedAccessToken = encryptToken(accessToken);
   const sql = `
     UPDATE ${USER_INTEGRATIONS_TABLE}
     SET access_token = $1, token_expires_at = $2, last_sync_at = now()
@@ -128,7 +149,7 @@ export const updateIntegrationTokens = async (
 
   try {
     const result = await query(sql, [
-      accessToken,
+      encryptedAccessToken,
       expiresAt?.toISOString() || null,
       integrationId,
     ]);
@@ -140,6 +161,7 @@ export const updateIntegrationTokens = async (
 // Get all user integrations
 export const getUserIntegrations = async (
   userId: string
 ): Promise<UserIntegration[]> => {
   const sql = `
     SELECT * FROM ${USER_INTEGRATIONS_TABLE}
@@ -150,7 +172,15 @@ export const getUserIntegrations = async (
 
   try {
     const result = await query(sql, [userId]);
-    return result.rows;
+    return result.rows.map(integration => ({
+      ...integration,
+      access_token: decryptToken(integration.access_token),
+      refresh_token: integration.refresh_token ? decryptToken(integration.refresh_token) : null,
+    }));
   } catch (error) {
     console.error("Error getting user integrations:", error);
     throw error;
